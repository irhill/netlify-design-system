const t="mcc-pagination",e={create({createComponent:e,html:a}){e(t,function(t){return{props:{pageSize:{type:Number,default:10},itemCount:{type:Number},ariaLabel:{type:String,default:"Pagination"}},state:()=>({page:1}),methods:{emitChangeEvent(){const t=new CustomEvent("change",{detail:{page:this.state.page}});this.dispatchEvent(t)},previousPage(){this.state.page>1&&this.state.page--&&this.methods.emitChangeEvent()},nextPage(){const t=Math.ceil(this.props.itemCount/this.props.pageSize);this.state.page<t&&this.state.page++&&this.methods.emitChangeEvent()},setPage(t){this.state.page!==t&&(t<1||t>Math.ceil(this.props.itemCount/this.props.pageSize)||(this.state.page=t,this.methods.emitChangeEvent()))}},mounted(){this.setPage=this.methods.setPage},render(){if(this.props.itemCount)return t`<nav class="mcc-pagination" aria-label="${this.props.ariaLabel}"><button type="button" onclick="${this.methods.previousPage}"><mcc-icon name="double_left"></mcc-icon></button> ${Array.apply(null,Array(Math.ceil(this.props.itemCount/this.props.pageSize))).map(((e,a)=>t`<button type="button" class="${this.state.page===a+1?"mu-is-active":""}" onclick="${()=>this.methods.setPage(a+1)}">${a+1}</button>`))} <button type="button" onclick="${this.methods.nextPage}"><mcc-icon name="double_right"></mcc-icon></button></nav>`}}}(a))}};export{e as pagination};
